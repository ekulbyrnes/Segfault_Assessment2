/*
STYLES.CSS
This is the main CSS page for the SegFault website. This has been updated last of 26th March, 2025.
*/

/* Global HTML tag definitions START */
/*
We first define what we would want everything to be within the page if we never defined a class for this.
The objective is to use as little classes as possible, because we can define multiple classes. ;)

We want the background to be white, any browser-based padding and margins to be 0,
tags to help us 'contain' conent should not be inline and we can make h1 tags just a bit bigger!
-Nicole
*/
html, body {
    background-color: white;
    padding: 0;
    margin: 0;
    font-family: sans-serif;
    min-width: 500px;
}
header, nav, section, aside {
    display: block;
    overflow:hidden;
}
/* Setting H1 via shorthand */
h1 {
    font: 2.75em Inconsolata, sans-serif;
}

@font-face {
    font-family: Inconsolata;
    src: url(fonts/Inconsolata/Inconsolata-VariableFont_wdth,wght.ttf);

}

/* Global HTML tag definitions END */

/* Header and Nav START */
/*
These are the classes mostly associated with the navigation element, of what the header tag in our HTML contains the unordered list
and links. We define classes and mostly rely on inheritance here as there is a large amount of content and tags that cover
a small portion of the screen, such as links, lists and asides.

navpage is for links, and creates a 'small' rotation when hovered on.
- Nicole
*/
.header {
    position: sticky;
    z-index: 1000;
    background-color: black;
    font-size: 20px;
}
.navpadding {
    width: 100%;
    padding: 0px 15px 0px 15px;
    margin: 0px auto 0px auto;
    align-items: center !important;
    display: flex;
    justify-content: space-between !important;
}

.header aside {
    flex: 1 0 20%;
    justify-content: flex-start;
}
.logo {
    display: inline-block;
}

.logo img {
    width: 100%;
    max-height: 45px;
}

.header nav {
    justify-content: flex-end;
    align-content: center;
    flex: 1 0 80%;
    top: 0px;
    color: white;
}
.header nav ul {
/* margin and padding should come from navpadding */
    list-style-type: none;
    overflow: hidden;
    width: 100%;
    padding: 0;
    margin: 0;

}
.header nav li {
    /* keeps items in float left with flex-justify */
    margin-right: 1em;
    display: inline-flex;
    float: right;
}
/* NAV and related CSS */
.navpage {
    display: block;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    transition: 0.5s;

}
.navpage:hover {
    padding-top: 15px;
    padding-bottom: 5px;
    transform: rotate(-5deg);
}

@media only screen and (max-width:1150px) {
    .navpadding {
        display: block;
    }
    .header nav {
        text-align: center;
    }
    .header aside {
        margin: 0 auto;
        width: 20%;
        min-width: 100px;
    }
    .header nav li {
        margin: 0;
        float:none;
    }

}

@media only screen and (max-width:800px) {
    .header nav li {
        float: none;
    }
}

/* Header and Nav END */

/* Utility classes START */
/*
Since tags in HTML can be assigned multiple CSS classes, and there is inheritance
we should aim to create some initial 'utility' tags to help us define content when we
don't have any inheritence to depend on, such as body content or attributes we didn't define within
tables, sections, or asides.
- Nicole
*/

.centerimage {
    display: block;
    margin: 0 auto;
}

.center-text {
    text-align: center !important;
}
.left-text {
    text-align: left !important;
}
.two-grid {
    width: 45%;
}

/* No text decoration on links or no bullets on lists, if desired! */
.no-link-decor {
    text-decoration: none;
    color: black;
}
.no-list-decor {
    list-style-type: none;
}
.no-list-decor li {
    list-style-type: none;
}

/* Specific text decoration on bullets in lists */ /* lbyrnes */
.underscore {
    list-style-type:"_ "; /* &#rdsh */
    padding: 1.5em;
}

/* Utility classes END */

/* BODY css Content */

/* Details-Flex flex display
This is a flex box that creates a table of a 40/40 grow ratio in left/right-item
You can use overflow-item as a 1 flexbox long div, creating a 'line-break'.

Flex-shout is used to animate the gallery on apply.html, allowing us to create
a dynamic image within the flexbox. Enhancement 2
- Nicole
*/

.details-flex {

    display: flex;
    justify-content: center;
    align-items: stretch;
    flex-wrap: wrap;
    align-content: stretch;
    height: 100%;
    gap: 5px;

  }
  /* All tags in details-flex by default are centered text, and don't have list buttons. - Nicole */
  .details-flex > * > * {
    text-align: center;
    list-style-type: none;
  }

  /*
  Gives us a border and a way for us to make images in a picture tag
  just a bit smaller on hover, and creates a rounded effect for all images.
  */
  .details-flex > * picture img {
    border-radius: 1em;
    transform: translate(-20%);
    transition: 0.3s;
  }
  .details-flex > * picture img:hover {
    transform: translate(-2%);
  }
  /*
  Flex left-/right-item classes.
  Both left and right items can be used, as they are functionally the same.
  both ask for a flex grow of one with a ratio of 40%, meaning they attempt to fill 80% of the page.
  with .focus, this allows for a two column table with margins.
  - Nicole
  */
  .left-item, .right-item {
    flex:1 0 40%;
    margin: 1em;
  }

  /* There are 25% viewport classes specifically for the positions page, according to the rubric.
  Instead of float left/right and clear with inline and inline block display parameters, we are using CSS3
  flex shorthand to set the size of the content (100%w of parent), and what percentage it should occupy.*/
  .job-left, .job-right {
    flex: 1 0 25%;
    margin: 1em;
  }


/*
Overflow-item is similar to a line-break <br> tag, but for flexbox items.
We are asking for this to be the third item in order of the flex both, and has to occupy 100% of the flexbox.
- Nicole
*/
  .overflow-item {
    /* flex:1 1 100%; */
    order:3;
    flex-grow:1;
    flex-basis:100%;
    align-self:auto;
  }
/*
This is the flexbox element on gallery on jobs.html
This allows us to create a small element that can contain elements we want the
user to see and interact with, like images. On hover psuedoclass, we allow the
flex-shout/side-panel elements to 'jut out' from the left.

- Nicole
*/
  .flex-shout {
    /* flex:0 1 30%; */
    flex-grow:0;
    transition: 0.3s;
  }
  .flex-shout:hover {
    padding: 0 1em;
  }

/* TODO: This could be folded into display-flex technically.
We use center-flex and newline-flex to organise the flexbox that is in the main 'hero' section, to create a bold header
and a subheader call-to-action.
- Nicole
*/
.center-flex {
    display: flex;
    flex-wrap: wrap;
    gap: 5px 10px;
    justify-content: center;
    align-items: center;
    height: 100%;
}
.newline-flex {
    flex-basis: 100%;
}


/* CSS Animations - Enhancement 1 */
/*
Terminal Blink start, lets us create a blinker animation.
0.3 finish time and loops infintely, blinker is defined in keyframes
to change opacity.
 - Nicole
*/
.terminalblink {
    animation: blinker 0.3s infinite;
}

@keyframes blinker {
  50% {
    opacity: 0;
  }
}
/* ---Terminal Blink end---, Enhancement 1 */
/* -- Pulse start -- */
/*
This is an animation that makes the class 'pulse' by growing in width to 110%.
On hover psuedoclass, we slightly change the font-size. (TODO: This could be calculated to the current font-size value.)
Transition attribute is used to help us smoothly transition in and out of :hover psuedo class.
- Nicole
*/
.pulse {
    animation: pulse 1s infinite;
    transition: 0.5s;
}

@keyframes pulse {
    20% {
        transform: scaleX(1.1);
    }
}

.pulse:hover {
    font-size: 0.8em;
}

/* Section CSS */
/*
This is where the main content of the CSS that defines how we wish to style sections, tags and classes typically in section and the like to be.
If it isn't defined within the global HTML tags defined at the start of the document and isn't used in the header/footer, it likely will be here.
- Nicole
*/
/*
Optional padding for our section tags that have content.
- Nicole
 */
.focus {
    margin: 0 3em 2em 3em;
}


/*
This was mostly used in enhancements.html, but this allows us to define a codeblock.
The colour palette is mostly grabbed off the Monokai Pro colour scheme:
https://gist.github.com/r-malon/8fc669332215c8028697a0bbfbfbb32a

We define keywords (functions, classes, id, etc) in the span tag as it is naturally inline.
-Nicole
*/
.code-block {
    background-color: #2e2e2e;
    margin: 1em;
    padding: 0.3em;
    font-family: monospace;
    color: white;
    border-radius: 5px;
    line-height: 1.5em ;
}
.code-block > span {
    color: #e5b567;
}

/*
This is the background of the hero title section, and uses a background image we keep in styles/images.
It is relative and also sets the text to be white.
- Nicole
*/
.slideshow {
    position: relative;
    min-height: 300px;
    overflow: hidden;
    background-image: url(./images/glasses.png);
    background-size: cover;
    color: white;
}

.slideshow h1 {
    flex-basis: 20%;
}


.profile {
    border-radius: 1em;
    border: .3em solid lightgray;
}

/*
Solidtable and it's inherited tags allow us to create a table with dotted borders.
This was originally used in the about.html page to help us collate content against our lab
classes, and can be used for other tables going forward.
- Nicole
*/
.solidtable {
    background-color: #eee;
    margin: 0 auto;

}
.solidtable thead {
    font-size: 14px;
    font-style: italic;
}

.solidtable td {
    border: 2px dotted black;
    padding: 5px;
    transition: 0.5s;
}
.solidtable tbody td:hover {
    padding: 10px;
}

/* groupdetails organises our dt/dd items in about.html and displays items
inline with flex. we then use simple left/right floats to enforce content, but this
could be cleaner with flex-basis/growth. -- Nicole */
.groupdetails {
    display: flex;
}
.groupdetails dt {
    text-align: right;
    flex-basis: 10%;
    padding: .5em;
}
.groupdetails dd {
    text-align: left;
    flex-basis: 15%;
    margin-left: 0px;
    margin-right: 3%;
    padding: .5em;
}

@media only screen and (max-width:750px) {
    .groupdetails {
        display: block;
        text-align: center;
    }
    .groupdetails dt, .groupdetails dd{
        float:none;
        text-align: left;
    }
}

/* !FIXME
.verticaltable {
    scope: none;
}*/
/* Section content end */
/* Jobs HTML Start - Nicole */
.job-listing {
    border:.3em solid lightgray;
    border-top-width: .6em;
    border-radius: .5em;
    padding: .5em;
}

/* Footer content start */
/*
This is a static footer that should be always in the browser.
The idea is to make an extremely small footer that tracks on the page, which should really only contain vital content.
In our context, this is mostly the unit code/name for this subject, and possibly any vital links.
- Nicole
*/
.staticfooter {
    position: sticky;
    z-index: 999;
    background-color: black;
    color: white;
    bottom: 0px;
    padding: 5px;
}

/*
This is the footer that should appear at the bottom of the page.
This can be more flashy, has aside, lists and link tags defined for us to insert more content.
- Nicole
*/
.pagefooter {
    background-color: black;
    color: white;
    bottom:0px;
}
.pagefooter aside {
    float: right;
    margin: 10px 20px 0px 0px;
}
.pagefooter li {
    list-style-type: none;
}
.pagefooter a {
    margin: 0.5em;
    color: white;
    text-decoration: none;
}
.pagefooter img {
    margin: 10px;
}


/* Apply Styling - Marcus */
/* flex */
/* Flex container for all flex items in the apply form. */
.form-container{
    display: flex;
    width:50%;
    max-width: 700px;
    justify-content: center;
    justify-self: center;
    flex-direction: row;
    align-items: flex-end;
    flex-wrap: wrap;
}

/* Flex items used in the apply form. Each row is treated as if it has 12 columns */
/* Flex item with a width of 12 columns */
.col-12{
    flex-basis: 100%;
    min-width: 180px;
}

/* Flex item with a width of 6 columns */
.col-6{
    flex-basis: 50%;
    min-width: 180px;
}

/* Flex item with a width of 4 columns */
.col-4{
    flex-basis: 33.333%;
    min-width: 86px;
}

/* Flex item with a width of 2 columns */
.col-2{
    flex-basis: 16.667%;
    min-width: 90px;
    align-self: stretch;
}

/* Flex item to force a new row */
.flex-break{
    flex-basis: 100%;
}

/* Gender */
/* Flex container for gender items */
.gender-flex-container{
    display: flex;
    width:100%;
    justify-content: left;
    justify-self: left;
    flex-direction: row;
    align-items: flex-end;
    flex-wrap: wrap;
}

/* Individual flex items within gender field */
.gender-flex-item{
    flex-basis: 90px;
}

/* Flex item for other gender text input */
#othergender{
    flex-basis: 50% !important;
    min-width: 140px !important;
    max-width: 230px !important;
    margin:2px 0 0px !important;
}

/* Override margins for gender fieldset */
#genderFieldset{
    margin-left: 0px;
    margin-right: 0px;
    margin-bottom: 0px;
    padding-bottom: 0.15em;
}

/* Label styling within gender field */
div.gender-flex-container label{
    font-size: 1em !important;
}

/* Input styling */
/* Textbox & email styling */
input[type=text],input[type=email]{
    width: calc(100% - 25px);
    padding:4px;
    margin:2px 0 15px 0;
    background-color: whitesmoke;
    border:2px solid lightgray;
    border-radius:4px;
    outline: none;
}

/* Padding and margin from the input are added to the flex-basis width, so this subtracts that extra width from the flex-basis */
input.col-6{
    flex-basis: calc(50% - 12px)
}

/* Textarea styling */
textarea{
    width: 96.5%;
    margin:2px 0 15px;
    background-color: whitesmoke;
    border:2px solid lightgray;
    border-radius:4px;
    outline: none;
}

/* Input & dropdown styling when hovered */
input:hover, select:hover, textarea:hover{
    border:2px solid orange;
    border-radius:4px;
}

/* Input & dropdown styling when in focus */
input:focus, select:focus, textarea:focus{
    background-color: rgb(255, 250, 250);
    border:2px solid darkorange;
}

/* Radio & checkbox styling */
input[type=radio],input[type=checkbox]{
    accent-color: orange;
}

/* Radio & checkbox styling when hovered */
input[type=radio]:hover, input[type=checkbox]:hover{
    accent-color: rgb(200, 130, 0);
}

/* Dropdown styling */
select{
    background-color: whitesmoke;
    border:2px solid lightgray;
    border-radius:4px;
    height: 28px;
    margin-top: 2px;
    width: calc(100% - 15px);
}

/* Fieldset styling */
fieldset{
    display: block;
    margin-left: 10%;
    margin-right: 10%;
    margin-bottom: 3%;
    padding-top: 0.35em;
    padding-bottom: 0.625em;
    padding-left: 0.75em;
    padding-right: 0.75em;
    border: 2px groove rgba(214, 191, 182, 0.326);
}

input[type=submit]{
    flex-basis:20%;
    padding: 0.4em;
    font-weight: bold;
}

/* Label Styling */
label{
font-size: 1.2em;
}

/* Form headings styling */
form fieldset div h3,h4{
margin-bottom: 2px;
margin-top: 0px;
}
/* End Apply Styling - Marcus */

/* Article styling below designed by Luke for use in the reach.html page.
Made use of the flex-settings from other pages and added additional parameters like
colors, paddings, and box-shadowing
This provides a crisp article-style layout that centres the content on the page
using the column classes, but with additional formatting applied for this segment.
Reference: https://www.w3schools.com. */

/* Made use of general HTML elements and narrowed element specificity using nested elements */

article {
    /* Switch me on to switch style */
    /* background-color:black;
    color:  greenyellow;
    font-family: 'Courier New', Courier, monospace; */
    margin: 1em;
    padding: 2em;
    box-shadow: 1px 1px 1px 10px gray;
    display: flex;
    width:50%;
    max-width: 100%;
    justify-content: left;
    justify-self: center;
    flex-direction: row;
    align-items: flex-end;
    flex-wrap: wrap;
}

article section {
    padding: 1em;
    display: inline;
    width:100%;
    max-width: 100%;
    justify-content: left;
    justify-self: left;
    flex-direction: row;
    align-items: flex-end;
    flex-wrap: wrap;
}

article section .stub {
    padding: 1em;
    display: inline;
    width:100%;
    max-width: 100%;
    justify-content: center;
    justify-self: center;
    flex-direction: row;
    align-items: flex-end;
    flex-wrap: wrap;
}

#job {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: row;
    gap: 100px;
    margin-top: 5%;
    margin-bottom: 3%;
}

.job-link {
    text-decoration: none;
    color: rgb(255, 243, 243);
}

#job1 {
    background-image: url(./images/kotlin.webp);
    background-repeat: no-repeat;
    background-size: 100% 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50em;
    height: 500px;
    border: 3px solid black;
    border-radius: 50px;
}

#job2 {
    background-image: url(./images/SRE.webp);
    background-repeat: no-repeat;
    background-size: 100% 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50em;
    height: 500px;
    border: 3px solid black;
    border-radius: 50px;
}

.heading2 {
    text-align: center;
    font-size: 32px;
}

#siteInfo {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    margin-top: 2em;
    margin-bottom: 1em;
    text-align: center;
    line-height: 50px;
}

.infoLogo {
    position: relative;
    width: 200px;
    top: 20px;
    right: 7px;
    animation: float 1.2s ease-in-out infinite;
}
/*This might need to go into the enhancement page*/
/*
citation: https://www.geeksforgeeks.org/css-floating-animation/
*/
@keyframes float {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-10px);
    }
    100% {
        transform: translateY(0);
    }
}

#howToStart {
    text-align: center;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 100px;
    margin-bottom: 8%;
}

.heading3 {
    font-size: 26px;
    border-bottom: 1px solid rgb(202, 202, 202);
    padding: 15px;
}

#achieved {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    margin-bottom: 8%;
    gap: 100px;
}

.achievement {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border: 1px solid black;
    border-radius: 20px;
    padding: 30px;
    line-height: 0;
    overflow: visible;
    width: 20em;
    height: 10em
}

#worker {
    font-size: 34px;
}

#number1 {
    font-size: 34px;
}

.child1 {
    font-size: 22px;
}

.child2 {
    color: gray;
}

#info {
    color: rgb(63, 63, 63);
}

/* Styling of embedded video on index page - Marcus */
embed{
    display: block;
    justify-self: center;
    height: 450px;
    width: 800px;
    margin-bottom: 4em;
    margin-top: 1em;
}